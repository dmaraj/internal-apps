-- drop objects
drop table IA_COMPANY cascade constraints;
drop table IA_DEPARTMENT cascade constraints;
drop table IA_PERSONNEL cascade constraints;
drop procedure IA_TAGS_sync;
drop table IA_TAGS cascade constraints;
drop table IA_TAGS_tsum cascade constraints;
drop table IA_TAGS_sum cascade constraints;
drop table IA_HISTORY cascade constraints;
drop view IA_HISTORY_V;
drop sequence IA_HISTORY_SEQ;
drop sequence IA_ROW_KEY_SEQ;
drop package IA_COMPANY_API;
drop package IA_DEPARTMENT_API;
drop package IA_PERSONNEL_API;

-- sequences
create sequence IA_ROW_KEY_SEQ;

-- create tables
create table IA_COMPANY (
    ID                             NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY  
                                   constraint IA_COMPANY_ID_PK primary key,
    ROW_VERSION                    INTEGER not null,
    ROW_KEY                        VARCHAR2(30)
                                   constraint IA_COMPANY_ROW_KEY_UNQ unique not null,
    NAME                           VARCHAR2(255),
    CREATED                        TIMESTAMP WITH LOCAL TIME ZONE not null,
    CREATED_BY                     VARCHAR2(255) not null,
    UPDATED                        TIMESTAMP WITH LOCAL TIME ZONE not null,
    UPDATED_BY                     VARCHAR2(255) not null
)
;

create table IA_DEPARTMENT (
    ID                             NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY  
                                   constraint IA_DEPARTMENT_ID_PK primary key,
    COMPANY_ID                     NUMBER
                                   constraint IA_DEPARTMENT_COMPANY_ID_FK
                                   references IA_COMPANY on delete cascade,
    ROW_VERSION                    INTEGER not null,
    ROW_KEY                        VARCHAR2(30)
                                   constraint IA_DEPARTMENT_ROW_KEY_UNQ unique not null,
    NAME                           VARCHAR2(255),
    CREATED                        TIMESTAMP WITH LOCAL TIME ZONE not null,
    CREATED_BY                     VARCHAR2(255) not null,
    UPDATED                        TIMESTAMP WITH LOCAL TIME ZONE not null,
    UPDATED_BY                     VARCHAR2(255) not null
)
;

create table IA_PERSONNEL (
    ID                             NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY  
                                   constraint IA_PERSONNEL_ID_PK primary key,
    DEPARTMENT_ID                  NUMBER
                                   constraint IA_PERSONNEL_DEPARTMENT_ID_FK
                                   references IA_DEPARTMENT on delete cascade,
    ROW_VERSION                    INTEGER not null,
    ROW_KEY                        VARCHAR2(30)
                                   constraint IA_PERSONNEL_ROW_KEY_UNQ unique not null,
    FIRST_NAME                     VARCHAR2(255),
    LAST_NAME                      VARCHAR2(255),
    EMAIL                          VARCHAR2(255),
    TITLE                          VARCHAR2(255),
    USERNAME                       VARCHAR2(255),
    SYSUR_AUTO_KEY                 NUMBER,
    WOK_AUTO_KEY                   NUMBER,
    USER_ID                        NUMBER,
    MANAGER                        VARCHAR2(1) default on null 'N',
    TRAINER                        VARCHAR2(1) default on null 'N',
    CREATED                        TIMESTAMP WITH LOCAL TIME ZONE not null,
    CREATED_BY                     VARCHAR2(255) not null,
    UPDATED                        TIMESTAMP WITH LOCAL TIME ZONE not null,
    UPDATED_BY                     VARCHAR2(255) not null
)
;


-- tag framework
create table IA_TAGS (
    id                    number not null primary key,
    tag                   varchar2(255) not null enable,
    content_pk            number,
    content_table         varchar2(128),
    created               timestamp with local time zone not null,
    created_by            varchar2(255) not null,
    updated               timestamp with local time zone,
    updated_by            varchar2(255) )
;

create or replace trigger IA_TAGS_BIU
before insert or update on IA_TAGS
for each row
begin
   if inserting then 
      if :NEW.ID is null then 
        select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') x
        into :new.id
        from dual;
      end if;
      :NEW.CREATED := LOCALTIMESTAMP;
      :NEW.CREATED_BY := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),user);
   end if; 
   if updating then 
      :NEW.UPDATED := LOCALTIMESTAMP; 
      :NEW.UPDATED_BY := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),user);
   end if; 
end; 
/

create table IA_TAGS_TSUM (
    tag                    varchar2(255),
    content_table          varchar2(128),
    tag_count              number,
    constraint IA_TAGS_tspk primary key (tag,content_table) )
;

create table IA_TAGS_SUM (
    tag                    varchar2(255),
    tag_count              number,
    constraint IA_TAGS_spk primary key (tag) )
;

create or replace procedure IA_TAGS_SYNC (
    p_new_tags          in varchar2,
    p_old_tags          in varchar2,
    p_content_table     in varchar2,
    p_content_pk        in number )
as
    type tags is table of varchar2(255) index by varchar2(255);
    type tag_values is table of varchar2(32767) index by binary_integer;
    l_new_tags_a    tags;
    l_old_tags_a    tags;
    l_new_tags      tag_values;
    l_old_tags      tag_values;
    l_merge_tags    tag_values;
    l_dummy_tag     varchar2(255);
    i               integer;
    function string_to_table (
        str    in varchar2,
        sep    in varchar2 default ':')
        return tag_values
    is
        temp         tag_values;
        l_str        varchar2(32767) := str;
        pos          pls_integer;
        i            pls_integer := 1;
        l_sep_length pls_integer := length(sep);
    begin
        if str is null or sep is null then
            return temp;
        end if;
        if substr( l_str, 1, l_sep_length ) = sep then
            l_str := substr( l_str, l_sep_length + 1 );
        end if;
        if substr( l_str, length( l_str ) - l_sep_length + 1 ) = sep then
            l_str := substr( l_str, 1, length( l_str ) - l_sep_length );
        end if;
        loop
            pos := instr( l_str, sep );
            exit when nvl(pos,0) = 0;
            temp(i) := substr( l_str, 1, pos-1 );
            l_str := substr( l_str, pos + l_sep_length );
            i := i + 1;
        end loop;
        temp(i) := trim(l_str);
        return temp;
    exception when others then return temp;
    end;
begin
    l_old_tags := string_to_table(p_old_tags,',');
    l_new_tags := string_to_table(p_new_tags,',');
    if l_old_tags.count > 0 then --do inserts and deletes
        --build the associative arrays
        for i in 1..l_old_tags.count loop
            l_old_tags_a(l_old_tags(i)) := l_old_tags(i);
        end loop;
        for i in 1..l_new_tags.count loop
            l_new_tags_a(l_new_tags(i)) := l_new_tags(i);
        end loop;
        --do the inserts
        for i in 1..l_new_tags.count loop
            begin
                l_dummy_tag := l_old_tags_a(l_new_tags(i));
            exception when no_data_found then
                insert into IA_TAGS (tag, content_pk, content_table )
                values (trim(l_new_tags(i)), p_content_pk, p_content_table );
                l_merge_tags(l_merge_tags.count + 1) := l_new_tags(i);
            end;
        end loop;
        --do the deletes
        for i in 1..l_old_tags.count loop
            begin
                l_dummy_tag := l_new_tags_a(l_old_tags(i));
            exception when no_data_found then
                delete from IA_TAGS where content_pk = p_content_pk and tag = l_old_tags(i);
                l_merge_tags(l_merge_tags.count + 1) := l_old_tags(i);
            end;
        end loop;
    else --just do inserts
        if l_new_tags.exists(1) then
          for i in 1..l_new_tags.count loop
              insert into IA_TAGS (tag, content_pk, content_table )
              values (trim(l_new_tags(i)), p_content_pk, p_content_table );
              l_merge_tags(l_merge_tags.count + 1) := l_new_tags(i);
          end loop;
        end if;
    end if;
    for i in 1..l_merge_tags.count loop
        merge into IA_TAGS_tsum s
        using (select count(*) tag_count
                 from IA_TAGS
                where tag = l_merge_tags(i) and content_table = p_content_table ) t
        on (s.tag = l_merge_tags(i) and s.content_table = p_content_table )
        when not matched then insert (tag, content_table, tag_count)
                              values (trim(l_merge_tags(i)), p_content_table, t.tag_count)
        when matched then update set s.tag_count = t.tag_count;
        merge into IA_TAGS_sum s
        using (select sum(tag_count) tag_count
                 from IA_TAGS_tsum
                where tag = l_merge_tags(i) ) t
        on (s.tag = l_merge_tags(i) )
        when not matched then insert (tag, tag_count)
                              values (trim(l_merge_tags(i)), t.tag_count)
        when matched then update set s.tag_count = t.tag_count;
    end loop; 
end IA_TAGS_SYNC;
/

-- triggers
create or replace trigger IA_COMPANY_BIU
    before insert or update 
    on IA_COMPANY
    for each row
declare
   function compress_int (n in integer ) return varchar2
   as
      ret       varchar2(30);
      quotient  integer;
      remainder integer;
      digit     char(1);
   begin
      ret := null; quotient := n;
      while quotient > 0
      loop
          remainder := mod(quotient, 10 + 26);
          quotient := floor(quotient  / (10 + 26));
          if remainder < 26 then
              digit := chr(ascii('A') + remainder);
          else
              digit := chr(ascii('0') + remainder - 26);
          end if;
          ret := digit || ret;
      end loop ;
      if length(ret) < 5 then ret := lpad(ret, 4, 'A'); end if ;
      return upper(ret);
   end compress_int;
begin
    if inserting then
        :new.ROW_VERSION := 1;
    elsif updating then
        :new.ROW_VERSION := NVL(:old.ROW_VERSION,0) + 1;
    end if;
    if inserting then
        :new.row_key := compress_int(IA_ROW_KEY_SEQ.nextval);
    end if;
    if inserting then
        :new.created := LOCALTIMESTAMP;
        :new.created_by := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),user);
    end if;
    :new.updated := LOCALTIMESTAMP;
    :new.updated_by := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),user);
end;
/

create or replace trigger IA_DEPARTMENT_BIU
    before insert or update 
    on IA_DEPARTMENT
    for each row
declare
   function compress_int (n in integer ) return varchar2
   as
      ret       varchar2(30);
      quotient  integer;
      remainder integer;
      digit     char(1);
   begin
      ret := null; quotient := n;
      while quotient > 0
      loop
          remainder := mod(quotient, 10 + 26);
          quotient := floor(quotient  / (10 + 26));
          if remainder < 26 then
              digit := chr(ascii('A') + remainder);
          else
              digit := chr(ascii('0') + remainder - 26);
          end if;
          ret := digit || ret;
      end loop ;
      if length(ret) < 5 then ret := lpad(ret, 4, 'A'); end if ;
      return upper(ret);
   end compress_int;
begin
    if inserting then
        :new.ROW_VERSION := 1;
    elsif updating then
        :new.ROW_VERSION := NVL(:old.ROW_VERSION,0) + 1;
    end if;
    if inserting then
        :new.row_key := compress_int(IA_ROW_KEY_SEQ.nextval);
    end if;
    if inserting then
        :new.created := LOCALTIMESTAMP;
        :new.created_by := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),user);
    end if;
    :new.updated := LOCALTIMESTAMP;
    :new.updated_by := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),user);
end;
/

create or replace trigger IA_PERSONNEL_BIU
    before insert or update 
    on IA_PERSONNEL
    for each row
declare
   function compress_int (n in integer ) return varchar2
   as
      ret       varchar2(30);
      quotient  integer;
      remainder integer;
      digit     char(1);
   begin
      ret := null; quotient := n;
      while quotient > 0
      loop
          remainder := mod(quotient, 10 + 26);
          quotient := floor(quotient  / (10 + 26));
          if remainder < 26 then
              digit := chr(ascii('A') + remainder);
          else
              digit := chr(ascii('0') + remainder - 26);
          end if;
          ret := digit || ret;
      end loop ;
      if length(ret) < 5 then ret := lpad(ret, 4, 'A'); end if ;
      return upper(ret);
   end compress_int;
begin
    if inserting then
        :new.ROW_VERSION := 1;
    elsif updating then
        :new.ROW_VERSION := NVL(:old.ROW_VERSION,0) + 1;
    end if;
    if inserting then
        :new.row_key := compress_int(IA_ROW_KEY_SEQ.nextval);
    end if;
    if inserting then
        :new.created := LOCALTIMESTAMP;
        :new.created_by := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),user);
    end if;
    :new.updated := LOCALTIMESTAMP;
    :new.updated_by := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),user);
end;
/


-- indexes
create index IA_DEPARTMENT_i1 on IA_DEPARTMENT (COMPANY_ID);
create index IA_PERSONNEL_i1 on IA_PERSONNEL (DEPARTMENT_ID);

-- history tracking
create sequence IA_HISTORY_SEQ;
create table IA_HISTORY (
    id                  number primary key,
    table_name          varchar2(128),
    column_name         varchar2(128),
    action              varchar2(1) check (action in ('I','U','D')),
    action_date         TIMESTAMP WITH LOCAL TIME ZONE,
    action_by           varchar2(255),
    data_type           varchar2(255),
    pk1                 number,
    tab_row_version     integer,
    old_vc              varchar2(4000),
    new_vc              varchar2(4000),
    old_number          number,
    new_number          number,
    old_date            date,
    new_date            date,
    old_ts              timestamp,
    new_ts              timestamp,
    old_tswtz           timestamp with time zone,
    new_tswtz           timestamp with time zone,
    old_tswltz          timestamp with local time zone,
    new_tswltz          timestamp with local time zone,
    old_clob            clob,
    new_clob            clob,
    old_blob            blob,
    new_blob            blob
)
/

create index IA_HISTORY_idx1 on IA_HISTORY (pk1);
create index IA_HISTORY_idx2 on IA_HISTORY (table_name, column_name);

create or replace view IA_HISTORY_V as
select id,
       table_name,
       column_name,
       decode(action,'U','Update','D','Delete') action,
       action_date,
       action_by,
       pk1 table_primary_key,
       tab_row_version table_row_version,
       decode(data_type,
         'NUMBER',old_number||' > '||new_number,
         'VARCHAR2',substr(old_vc,1,50)||' > '||substr(new_vc,1,50),
         'DATE',to_char(old_date,'DD-MON-YYY HH24:MI:SS')||' > '||to_char(new_date,'DD-MON-YYY HH24:MI:SS'),
         'TIMESTAMP',to_char(old_ts,'DD-MON-YYY HH24:MI:SS')||' > '||to_char(new_ts,'DD-MON-YYY HH24:MI:SS'),
         'TIMESTAMP WITH TIMEZONE',to_char(old_tswtz,'DD-MON-YYY HH24:MI:SS')||' > '||to_char(new_tswtz,'DD-MON-YYY HH24:MI:SS'),
         'TIMESTAMP WITH LOCAL TIMEZONE',to_char(old_tswltz,'DD-MON-YYY HH24:MI:SS')||' > '||to_char(new_tswltz,'DD-MON-YYY HH24:MI:SS'),
         'BLOB','length '||dbms_lob.getlength(old_blob)||' > '||' length '||dbms_lob.getlength(new_blob),
         'CLOB',dbms_lob.substr(old_vc,50,1)||' > '||dbms_lob.substr(new_vc,50,1)
         ) change
from IA_HISTORY
/

create or replace trigger IA_COMPANY_AUD 
    after update or delete on IA_COMPANY
    for each row
declare
    t varchar2(128) := 'IA_COMPANY';
    u varchar2(128) := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),user);
begin
if updating then
    if (:old.ID is null and :new.ID is not null) or 
        (:old.ID is not null and :new.ID is null) or 
        :old.ID != :new.ID then 
        insert into IA_HISTORY (
            id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_number, new_number
        ) values (
            IA_HISTORY_SEQ.nextval, t,'ID', :old.ID, :new.ROW_VERSION, 'U', SYSDATE, u, 'NUMBER', :old.ID, :new.ID);

    end if;
    if (:old.NAME is null and :new.NAME is not null) or 
        (:old.NAME is not null and :new.NAME is null) or 
        :old.NAME != :new.NAME then 
        insert into IA_HISTORY (
            id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_vc, new_vc
        ) values (
            IA_HISTORY_SEQ.nextval, t,'NAME', :old.ID, :new.ROW_VERSION, 'U', SYSDATE, u, 'VARCHAR2', :old.NAME, :new.NAME);

    end if;
elsif deleting then
    insert into IA_HISTORY (
        id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_number, new_number
    ) values (
        IA_HISTORY_SEQ.nextval, t,'ID', :old.ID, :new.ROW_VERSION, 'D', SYSDATE, u, 'NUMBER', :old.ID, :new.ID);
    insert into IA_HISTORY (
        id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_vc, new_vc
    ) values (
        IA_HISTORY_SEQ.nextval, t,'NAME', :old.ID, :new.ROW_VERSION, 'D', SYSDATE, u, 'VARCHAR2', :old.NAME, :new.NAME);

end if;
end;
/

create or replace trigger IA_DEPARTMENT_AUD 
    after update or delete on IA_DEPARTMENT
    for each row
declare
    t varchar2(128) := 'IA_DEPARTMENT';
    u varchar2(128) := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),user);
begin
if updating then
    if (:old.ID is null and :new.ID is not null) or 
        (:old.ID is not null and :new.ID is null) or 
        :old.ID != :new.ID then 
        insert into IA_HISTORY (
            id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_number, new_number
        ) values (
            IA_HISTORY_SEQ.nextval, t,'ID', :old.ID, :new.ROW_VERSION, 'U', SYSDATE, u, 'NUMBER', :old.ID, :new.ID);

    end if;
    if (:old.NAME is null and :new.NAME is not null) or 
        (:old.NAME is not null and :new.NAME is null) or 
        :old.NAME != :new.NAME then 
        insert into IA_HISTORY (
            id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_vc, new_vc
        ) values (
            IA_HISTORY_SEQ.nextval, t,'NAME', :old.ID, :new.ROW_VERSION, 'U', SYSDATE, u, 'VARCHAR2', :old.NAME, :new.NAME);

    end if;
    if (:old.COMPANY_ID is null and :new.COMPANY_ID is not null) or 
        (:old.COMPANY_ID is not null and :new.COMPANY_ID is null) or 
        :old.COMPANY_ID != :new.COMPANY_ID then 
        insert into IA_HISTORY (
            id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_number, new_number
        ) values (
            IA_HISTORY_SEQ.nextval, t,'COMPANY_ID', :old.ID, :new.ROW_VERSION, 'U', SYSDATE, u, 'NUMBER', :old.COMPANY_ID, :new.COMPANY_ID);

    end if;
elsif deleting then
    insert into IA_HISTORY (
        id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_number, new_number
    ) values (
        IA_HISTORY_SEQ.nextval, t,'ID', :old.ID, :new.ROW_VERSION, 'D', SYSDATE, u, 'NUMBER', :old.ID, :new.ID);
    insert into IA_HISTORY (
        id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_vc, new_vc
    ) values (
        IA_HISTORY_SEQ.nextval, t,'NAME', :old.ID, :new.ROW_VERSION, 'D', SYSDATE, u, 'VARCHAR2', :old.NAME, :new.NAME);
    insert into IA_HISTORY (
        id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_number, new_number
    ) values (
        IA_HISTORY_SEQ.nextval, t,'COMPANY_ID', :old.ID, :new.ROW_VERSION, 'D', SYSDATE, u, 'NUMBER', :old.COMPANY_ID, :new.COMPANY_ID);

end if;
end;
/

create or replace trigger IA_PERSONNEL_AUD 
    after update or delete on IA_PERSONNEL
    for each row
declare
    t varchar2(128) := 'IA_PERSONNEL';
    u varchar2(128) := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),user);
begin
if updating then
    if (:old.ID is null and :new.ID is not null) or 
        (:old.ID is not null and :new.ID is null) or 
        :old.ID != :new.ID then 
        insert into IA_HISTORY (
            id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_number, new_number
        ) values (
            IA_HISTORY_SEQ.nextval, t,'ID', :old.ID, :new.ROW_VERSION, 'U', SYSDATE, u, 'NUMBER', :old.ID, :new.ID);

    end if;
    if (:old.FIRST_NAME is null and :new.FIRST_NAME is not null) or 
        (:old.FIRST_NAME is not null and :new.FIRST_NAME is null) or 
        :old.FIRST_NAME != :new.FIRST_NAME then 
        insert into IA_HISTORY (
            id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_vc, new_vc
        ) values (
            IA_HISTORY_SEQ.nextval, t,'FIRST_NAME', :old.ID, :new.ROW_VERSION, 'U', SYSDATE, u, 'VARCHAR2', :old.FIRST_NAME, :new.FIRST_NAME);

    end if;
    if (:old.LAST_NAME is null and :new.LAST_NAME is not null) or 
        (:old.LAST_NAME is not null and :new.LAST_NAME is null) or 
        :old.LAST_NAME != :new.LAST_NAME then 
        insert into IA_HISTORY (
            id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_vc, new_vc
        ) values (
            IA_HISTORY_SEQ.nextval, t,'LAST_NAME', :old.ID, :new.ROW_VERSION, 'U', SYSDATE, u, 'VARCHAR2', :old.LAST_NAME, :new.LAST_NAME);

    end if;
    if (:old.EMAIL is null and :new.EMAIL is not null) or 
        (:old.EMAIL is not null and :new.EMAIL is null) or 
        :old.EMAIL != :new.EMAIL then 
        insert into IA_HISTORY (
            id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_vc, new_vc
        ) values (
            IA_HISTORY_SEQ.nextval, t,'EMAIL', :old.ID, :new.ROW_VERSION, 'U', SYSDATE, u, 'VARCHAR2', :old.EMAIL, :new.EMAIL);

    end if;
    if (:old.TITLE is null and :new.TITLE is not null) or 
        (:old.TITLE is not null and :new.TITLE is null) or 
        :old.TITLE != :new.TITLE then 
        insert into IA_HISTORY (
            id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_vc, new_vc
        ) values (
            IA_HISTORY_SEQ.nextval, t,'TITLE', :old.ID, :new.ROW_VERSION, 'U', SYSDATE, u, 'VARCHAR2', :old.TITLE, :new.TITLE);

    end if;
    if (:old.USERNAME is null and :new.USERNAME is not null) or 
        (:old.USERNAME is not null and :new.USERNAME is null) or 
        :old.USERNAME != :new.USERNAME then 
        insert into IA_HISTORY (
            id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_vc, new_vc
        ) values (
            IA_HISTORY_SEQ.nextval, t,'USERNAME', :old.ID, :new.ROW_VERSION, 'U', SYSDATE, u, 'VARCHAR2', :old.USERNAME, :new.USERNAME);

    end if;
    if (:old.SYSUR_AUTO_KEY is null and :new.SYSUR_AUTO_KEY is not null) or 
        (:old.SYSUR_AUTO_KEY is not null and :new.SYSUR_AUTO_KEY is null) or 
        :old.SYSUR_AUTO_KEY != :new.SYSUR_AUTO_KEY then 
        insert into IA_HISTORY (
            id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_number, new_number
        ) values (
            IA_HISTORY_SEQ.nextval, t,'SYSUR_AUTO_KEY', :old.ID, :new.ROW_VERSION, 'U', SYSDATE, u, 'NUMBER', :old.SYSUR_AUTO_KEY, :new.SYSUR_AUTO_KEY);

    end if;
    if (:old.WOK_AUTO_KEY is null and :new.WOK_AUTO_KEY is not null) or 
        (:old.WOK_AUTO_KEY is not null and :new.WOK_AUTO_KEY is null) or 
        :old.WOK_AUTO_KEY != :new.WOK_AUTO_KEY then 
        insert into IA_HISTORY (
            id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_number, new_number
        ) values (
            IA_HISTORY_SEQ.nextval, t,'WOK_AUTO_KEY', :old.ID, :new.ROW_VERSION, 'U', SYSDATE, u, 'NUMBER', :old.WOK_AUTO_KEY, :new.WOK_AUTO_KEY);

    end if;
    if (:old.USER_ID is null and :new.USER_ID is not null) or 
        (:old.USER_ID is not null and :new.USER_ID is null) or 
        :old.USER_ID != :new.USER_ID then 
        insert into IA_HISTORY (
            id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_number, new_number
        ) values (
            IA_HISTORY_SEQ.nextval, t,'USER_ID', :old.ID, :new.ROW_VERSION, 'U', SYSDATE, u, 'NUMBER', :old.USER_ID, :new.USER_ID);

    end if;
    if (:old.MANAGER is null and :new.MANAGER is not null) or 
        (:old.MANAGER is not null and :new.MANAGER is null) or 
        :old.MANAGER != :new.MANAGER then 
        insert into IA_HISTORY (
            id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_vc, new_vc
        ) values (
            IA_HISTORY_SEQ.nextval, t,'MANAGER', :old.ID, :new.ROW_VERSION, 'U', SYSDATE, u, 'VARCHAR2', :old.MANAGER, :new.MANAGER);

    end if;
    if (:old.TRAINER is null and :new.TRAINER is not null) or 
        (:old.TRAINER is not null and :new.TRAINER is null) or 
        :old.TRAINER != :new.TRAINER then 
        insert into IA_HISTORY (
            id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_vc, new_vc
        ) values (
            IA_HISTORY_SEQ.nextval, t,'TRAINER', :old.ID, :new.ROW_VERSION, 'U', SYSDATE, u, 'VARCHAR2', :old.TRAINER, :new.TRAINER);

    end if;
    if (:old.DEPARTMENT_ID is null and :new.DEPARTMENT_ID is not null) or 
        (:old.DEPARTMENT_ID is not null and :new.DEPARTMENT_ID is null) or 
        :old.DEPARTMENT_ID != :new.DEPARTMENT_ID then 
        insert into IA_HISTORY (
            id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_number, new_number
        ) values (
            IA_HISTORY_SEQ.nextval, t,'DEPARTMENT_ID', :old.ID, :new.ROW_VERSION, 'U', SYSDATE, u, 'NUMBER', :old.DEPARTMENT_ID, :new.DEPARTMENT_ID);

    end if;
elsif deleting then
    insert into IA_HISTORY (
        id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_number, new_number
    ) values (
        IA_HISTORY_SEQ.nextval, t,'ID', :old.ID, :new.ROW_VERSION, 'D', SYSDATE, u, 'NUMBER', :old.ID, :new.ID);
    insert into IA_HISTORY (
        id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_vc, new_vc
    ) values (
        IA_HISTORY_SEQ.nextval, t,'FIRST_NAME', :old.ID, :new.ROW_VERSION, 'D', SYSDATE, u, 'VARCHAR2', :old.FIRST_NAME, :new.FIRST_NAME);
    insert into IA_HISTORY (
        id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_vc, new_vc
    ) values (
        IA_HISTORY_SEQ.nextval, t,'LAST_NAME', :old.ID, :new.ROW_VERSION, 'D', SYSDATE, u, 'VARCHAR2', :old.LAST_NAME, :new.LAST_NAME);
    insert into IA_HISTORY (
        id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_vc, new_vc
    ) values (
        IA_HISTORY_SEQ.nextval, t,'EMAIL', :old.ID, :new.ROW_VERSION, 'D', SYSDATE, u, 'VARCHAR2', :old.EMAIL, :new.EMAIL);
    insert into IA_HISTORY (
        id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_vc, new_vc
    ) values (
        IA_HISTORY_SEQ.nextval, t,'TITLE', :old.ID, :new.ROW_VERSION, 'D', SYSDATE, u, 'VARCHAR2', :old.TITLE, :new.TITLE);
    insert into IA_HISTORY (
        id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_vc, new_vc
    ) values (
        IA_HISTORY_SEQ.nextval, t,'USERNAME', :old.ID, :new.ROW_VERSION, 'D', SYSDATE, u, 'VARCHAR2', :old.USERNAME, :new.USERNAME);
    insert into IA_HISTORY (
        id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_number, new_number
    ) values (
        IA_HISTORY_SEQ.nextval, t,'SYSUR_AUTO_KEY', :old.ID, :new.ROW_VERSION, 'D', SYSDATE, u, 'NUMBER', :old.SYSUR_AUTO_KEY, :new.SYSUR_AUTO_KEY);
    insert into IA_HISTORY (
        id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_number, new_number
    ) values (
        IA_HISTORY_SEQ.nextval, t,'WOK_AUTO_KEY', :old.ID, :new.ROW_VERSION, 'D', SYSDATE, u, 'NUMBER', :old.WOK_AUTO_KEY, :new.WOK_AUTO_KEY);
    insert into IA_HISTORY (
        id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_number, new_number
    ) values (
        IA_HISTORY_SEQ.nextval, t,'USER_ID', :old.ID, :new.ROW_VERSION, 'D', SYSDATE, u, 'NUMBER', :old.USER_ID, :new.USER_ID);
    insert into IA_HISTORY (
        id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_vc, new_vc
    ) values (
        IA_HISTORY_SEQ.nextval, t,'MANAGER', :old.ID, :new.ROW_VERSION, 'D', SYSDATE, u, 'VARCHAR2', :old.MANAGER, :new.MANAGER);
    insert into IA_HISTORY (
        id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_vc, new_vc
    ) values (
        IA_HISTORY_SEQ.nextval, t,'TRAINER', :old.ID, :new.ROW_VERSION, 'D', SYSDATE, u, 'VARCHAR2', :old.TRAINER, :new.TRAINER);
    insert into IA_HISTORY (
        id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_number, new_number
    ) values (
        IA_HISTORY_SEQ.nextval, t,'DEPARTMENT_ID', :old.ID, :new.ROW_VERSION, 'D', SYSDATE, u, 'NUMBER', :old.DEPARTMENT_ID, :new.DEPARTMENT_ID);

end if;
end;
/


-- APIs --
create or replace package IA_COMPANY_API
is
 
    /* example:
        declare
            L_ROW_VERSION                   INTEGER;
            L_ROW_KEY                       VARCHAR2(30);
            L_NAME                          VARCHAR2(255);
            L_CREATED                       TIMESTAMP WITH LOCAL TIME ZONE;
            L_CREATED_BY                    VARCHAR2(255);
            L_UPDATED                       TIMESTAMP WITH LOCAL TIME ZONE;
            L_UPDATED_BY                    VARCHAR2(255);
        begin
        IA_COMPANY_API.get_row (
            P_ID                            => 1,
            P_ROW_VERSION                   => L_ROW_VERSION,
            P_ROW_KEY                       => L_ROW_KEY,
            P_NAME                          => L_NAME,
            P_CREATED                       => L_CREATED,
            P_CREATED_BY                    => L_CREATED_BY,
            P_UPDATED                       => L_UPDATED,
            P_UPDATED_BY                    => L_UPDATED_BY
            );
        end;
    */

    procedure get_row (
        P_ID                           in number,
        P_ROW_VERSION                  out INTEGER,
        P_ROW_KEY                      out VARCHAR2,
        P_NAME                         out VARCHAR2,
        P_CREATED                      out TIMESTAMP WITH LOCAL TIME ZONE,
        P_CREATED_BY                   out VARCHAR2,
        P_UPDATED                      out TIMESTAMP WITH LOCAL TIME ZONE,
        P_UPDATED_BY                   out VARCHAR2
    );
 
    /* example:
        begin
        IA_COMPANY_API.insert_row (
            P_ID                          => 1,
            P_NAME                        => 'x'
            );
        end;
    */

    procedure insert_row  (
        P_ID                           in NUMBER default null,
        P_ROW_VERSION                  in INTEGER default null,
        P_ROW_KEY                      in VARCHAR2 default null,
        P_NAME                         in VARCHAR2 default null
    );
    procedure update_row  (
        P_ID                           in NUMBER default null,
        P_NAME                         in VARCHAR2 default null
    );
    procedure delete_row (
        P_ID                           in number
    );
end IA_COMPANY_API;
/


create or replace package  body IA_COMPANY_API
is
 
    procedure get_row (
        P_ID                           in number,
        P_ROW_VERSION                  out INTEGER,
        P_ROW_KEY                      out VARCHAR2,
        P_NAME                         out VARCHAR2,
        P_CREATED                      out TIMESTAMP WITH LOCAL TIME ZONE,
        P_CREATED_BY                   out VARCHAR2,
        P_UPDATED                      out TIMESTAMP WITH LOCAL TIME ZONE,
        P_UPDATED_BY                   out VARCHAR2
    )
    is
    begin
        for c1 in (select * from IA_COMPANY where id = P_ID) loop
            P_ROW_VERSION := c1.ROW_VERSION;
            P_ROW_KEY := c1.ROW_KEY;
            P_NAME := c1.NAME;
            P_CREATED := c1.CREATED;
            P_CREATED_BY := c1.CREATED_BY;
            P_UPDATED := c1.UPDATED;
            P_UPDATED_BY := c1.UPDATED_BY;
        end loop;
    end get_row;

 
    procedure insert_row  (
        P_ID                           in NUMBER default null,
        P_ROW_VERSION                  in INTEGER default null,
        P_ROW_KEY                      in VARCHAR2 default null,
        P_NAME                         in VARCHAR2 default null
    )
    is
    begin
        insert into IA_COMPANY (
            ID,
            NAME
        ) values (
            P_ID,
            P_NAME
        );
    end insert_row;

    procedure update_row  (
        P_ID                           in NUMBER default null,
        P_NAME                         in VARCHAR2 default null
    )
    is
    begin
        update  IA_COMPANY set 
            ID = P_ID,
            NAME = P_NAME
        where id = P_ID;
    end update_row;

    procedure delete_row (
        P_ID                           in number
    )
    is
    begin
        delete from IA_COMPANY where id = P_ID;
    end delete_row;

end IA_COMPANY_API;
/


create or replace package IA_DEPARTMENT_API
is
 
    /* example:
        declare
            L_ROW_VERSION                   INTEGER;
            L_ROW_KEY                       VARCHAR2(30);
            L_NAME                          VARCHAR2(255);
            L_COMPANY_ID                    NUMBER;
            L_CREATED                       TIMESTAMP WITH LOCAL TIME ZONE;
            L_CREATED_BY                    VARCHAR2(255);
            L_UPDATED                       TIMESTAMP WITH LOCAL TIME ZONE;
            L_UPDATED_BY                    VARCHAR2(255);
        begin
        IA_DEPARTMENT_API.get_row (
            P_ID                            => 1,
            P_ROW_VERSION                   => L_ROW_VERSION,
            P_ROW_KEY                       => L_ROW_KEY,
            P_NAME                          => L_NAME,
            P_COMPANY_ID                    => L_COMPANY_ID,
            P_CREATED                       => L_CREATED,
            P_CREATED_BY                    => L_CREATED_BY,
            P_UPDATED                       => L_UPDATED,
            P_UPDATED_BY                    => L_UPDATED_BY
            );
        end;
    */

    procedure get_row (
        P_ID                           in number,
        P_ROW_VERSION                  out INTEGER,
        P_ROW_KEY                      out VARCHAR2,
        P_NAME                         out VARCHAR2,
        P_COMPANY_ID                   out NUMBER,
        P_CREATED                      out TIMESTAMP WITH LOCAL TIME ZONE,
        P_CREATED_BY                   out VARCHAR2,
        P_UPDATED                      out TIMESTAMP WITH LOCAL TIME ZONE,
        P_UPDATED_BY                   out VARCHAR2
    );
 
    /* example:
        begin
        IA_DEPARTMENT_API.insert_row (
            P_ID                          => 1,
            P_NAME                        => 'x',
            P_COMPANY_ID                  => 1
            );
        end;
    */

    procedure insert_row  (
        P_ID                           in NUMBER default null,
        P_ROW_VERSION                  in INTEGER default null,
        P_ROW_KEY                      in VARCHAR2 default null,
        P_NAME                         in VARCHAR2 default null,
        P_COMPANY_ID                   in NUMBER default null
    );
    procedure update_row  (
        P_ID                           in NUMBER default null,
        P_NAME                         in VARCHAR2 default null,
        P_COMPANY_ID                   in NUMBER default null
    );
    procedure delete_row (
        P_ID                           in number
    );
end IA_DEPARTMENT_API;
/


create or replace package  body IA_DEPARTMENT_API
is
 
    procedure get_row (
        P_ID                           in number,
        P_ROW_VERSION                  out INTEGER,
        P_ROW_KEY                      out VARCHAR2,
        P_NAME                         out VARCHAR2,
        P_COMPANY_ID                   out NUMBER,
        P_CREATED                      out TIMESTAMP WITH LOCAL TIME ZONE,
        P_CREATED_BY                   out VARCHAR2,
        P_UPDATED                      out TIMESTAMP WITH LOCAL TIME ZONE,
        P_UPDATED_BY                   out VARCHAR2
    )
    is
    begin
        for c1 in (select * from IA_DEPARTMENT where id = P_ID) loop
            P_ROW_VERSION := c1.ROW_VERSION;
            P_ROW_KEY := c1.ROW_KEY;
            P_NAME := c1.NAME;
            P_COMPANY_ID := c1.COMPANY_ID;
            P_CREATED := c1.CREATED;
            P_CREATED_BY := c1.CREATED_BY;
            P_UPDATED := c1.UPDATED;
            P_UPDATED_BY := c1.UPDATED_BY;
        end loop;
    end get_row;

 
    procedure insert_row  (
        P_ID                           in NUMBER default null,
        P_ROW_VERSION                  in INTEGER default null,
        P_ROW_KEY                      in VARCHAR2 default null,
        P_NAME                         in VARCHAR2 default null,
        P_COMPANY_ID                   in NUMBER default null
    )
    is
    begin
        insert into IA_DEPARTMENT (
            ID,
            NAME,
            COMPANY_ID
        ) values (
            P_ID,
            P_NAME,
            P_COMPANY_ID
        );
    end insert_row;

    procedure update_row  (
        P_ID                           in NUMBER default null,
        P_NAME                         in VARCHAR2 default null,
        P_COMPANY_ID                   in NUMBER default null
    )
    is
    begin
        update  IA_DEPARTMENT set 
            ID = P_ID,
            NAME = P_NAME,
            COMPANY_ID = P_COMPANY_ID
        where id = P_ID;
    end update_row;

    procedure delete_row (
        P_ID                           in number
    )
    is
    begin
        delete from IA_DEPARTMENT where id = P_ID;
    end delete_row;

end IA_DEPARTMENT_API;
/


create or replace package IA_PERSONNEL_API
is
 
    /* example:
        declare
            L_ROW_VERSION                   INTEGER;
            L_ROW_KEY                       VARCHAR2(30);
            L_FIRST_NAME                    VARCHAR2(255);
            L_LAST_NAME                     VARCHAR2(255);
            L_EMAIL                         VARCHAR2(255);
            L_TITLE                         VARCHAR2(255);
            L_USERNAME                      VARCHAR2(255);
            L_SYSUR_AUTO_KEY                NUMBER;
            L_WOK_AUTO_KEY                  NUMBER;
            L_USER_ID                       NUMBER;
            L_MANAGER                       VARCHAR2(1);
            L_TRAINER                       VARCHAR2(1);
            L_DEPARTMENT_ID                 NUMBER;
            L_CREATED                       TIMESTAMP WITH LOCAL TIME ZONE;
            L_CREATED_BY                    VARCHAR2(255);
            L_UPDATED                       TIMESTAMP WITH LOCAL TIME ZONE;
            L_UPDATED_BY                    VARCHAR2(255);
        begin
        IA_PERSONNEL_API.get_row (
            P_ID                            => 1,
            P_ROW_VERSION                   => L_ROW_VERSION,
            P_ROW_KEY                       => L_ROW_KEY,
            P_FIRST_NAME                    => L_FIRST_NAME,
            P_LAST_NAME                     => L_LAST_NAME,
            P_EMAIL                         => L_EMAIL,
            P_TITLE                         => L_TITLE,
            P_USERNAME                      => L_USERNAME,
            P_SYSUR_AUTO_KEY                => L_SYSUR_AUTO_KEY,
            P_WOK_AUTO_KEY                  => L_WOK_AUTO_KEY,
            P_USER_ID                       => L_USER_ID,
            P_MANAGER                       => L_MANAGER,
            P_TRAINER                       => L_TRAINER,
            P_DEPARTMENT_ID                 => L_DEPARTMENT_ID,
            P_CREATED                       => L_CREATED,
            P_CREATED_BY                    => L_CREATED_BY,
            P_UPDATED                       => L_UPDATED,
            P_UPDATED_BY                    => L_UPDATED_BY
            );
        end;
    */

    procedure get_row (
        P_ID                           in number,
        P_ROW_VERSION                  out INTEGER,
        P_ROW_KEY                      out VARCHAR2,
        P_FIRST_NAME                   out VARCHAR2,
        P_LAST_NAME                    out VARCHAR2,
        P_EMAIL                        out VARCHAR2,
        P_TITLE                        out VARCHAR2,
        P_USERNAME                     out VARCHAR2,
        P_SYSUR_AUTO_KEY               out NUMBER,
        P_WOK_AUTO_KEY                 out NUMBER,
        P_USER_ID                      out NUMBER,
        P_MANAGER                      out VARCHAR2,
        P_TRAINER                      out VARCHAR2,
        P_DEPARTMENT_ID                out NUMBER,
        P_CREATED                      out TIMESTAMP WITH LOCAL TIME ZONE,
        P_CREATED_BY                   out VARCHAR2,
        P_UPDATED                      out TIMESTAMP WITH LOCAL TIME ZONE,
        P_UPDATED_BY                   out VARCHAR2
    );
 
    /* example:
        begin
        IA_PERSONNEL_API.insert_row (
            P_ID                          => 1,
            P_FIRST_NAME                  => 'x',
            P_LAST_NAME                   => 'x',
            P_EMAIL                       => 'x',
            P_TITLE                       => 'x',
            P_USERNAME                    => 'x',
            P_SYSUR_AUTO_KEY              => 1,
            P_WOK_AUTO_KEY                => 1,
            P_USER_ID                     => 1,
            P_MANAGER                     => 'x',
            P_TRAINER                     => 'x',
            P_DEPARTMENT_ID               => 1
            );
        end;
    */

    procedure insert_row  (
        P_ID                           in NUMBER default null,
        P_ROW_VERSION                  in INTEGER default null,
        P_ROW_KEY                      in VARCHAR2 default null,
        P_FIRST_NAME                   in VARCHAR2 default null,
        P_LAST_NAME                    in VARCHAR2 default null,
        P_EMAIL                        in VARCHAR2 default null,
        P_TITLE                        in VARCHAR2 default null,
        P_USERNAME                     in VARCHAR2 default null,
        P_SYSUR_AUTO_KEY               in NUMBER default null,
        P_WOK_AUTO_KEY                 in NUMBER default null,
        P_USER_ID                      in NUMBER default null,
        P_MANAGER                      in VARCHAR2 default null,
        P_TRAINER                      in VARCHAR2 default null,
        P_DEPARTMENT_ID                in NUMBER default null
    );
    procedure update_row  (
        P_ID                           in NUMBER default null,
        P_FIRST_NAME                   in VARCHAR2 default null,
        P_LAST_NAME                    in VARCHAR2 default null,
        P_EMAIL                        in VARCHAR2 default null,
        P_TITLE                        in VARCHAR2 default null,
        P_USERNAME                     in VARCHAR2 default null,
        P_SYSUR_AUTO_KEY               in NUMBER default null,
        P_WOK_AUTO_KEY                 in NUMBER default null,
        P_USER_ID                      in NUMBER default null,
        P_MANAGER                      in VARCHAR2 default null,
        P_TRAINER                      in VARCHAR2 default null,
        P_DEPARTMENT_ID                in NUMBER default null
    );
    procedure delete_row (
        P_ID                           in number
    );
end IA_PERSONNEL_API;
/


create or replace package  body IA_PERSONNEL_API
is
 
    procedure get_row (
        P_ID                           in number,
        P_ROW_VERSION                  out INTEGER,
        P_ROW_KEY                      out VARCHAR2,
        P_FIRST_NAME                   out VARCHAR2,
        P_LAST_NAME                    out VARCHAR2,
        P_EMAIL                        out VARCHAR2,
        P_TITLE                        out VARCHAR2,
        P_USERNAME                     out VARCHAR2,
        P_SYSUR_AUTO_KEY               out NUMBER,
        P_WOK_AUTO_KEY                 out NUMBER,
        P_USER_ID                      out NUMBER,
        P_MANAGER                      out VARCHAR2,
        P_TRAINER                      out VARCHAR2,
        P_DEPARTMENT_ID                out NUMBER,
        P_CREATED                      out TIMESTAMP WITH LOCAL TIME ZONE,
        P_CREATED_BY                   out VARCHAR2,
        P_UPDATED                      out TIMESTAMP WITH LOCAL TIME ZONE,
        P_UPDATED_BY                   out VARCHAR2
    )
    is
    begin
        for c1 in (select * from IA_PERSONNEL where id = P_ID) loop
            P_ROW_VERSION := c1.ROW_VERSION;
            P_ROW_KEY := c1.ROW_KEY;
            P_FIRST_NAME := c1.FIRST_NAME;
            P_LAST_NAME := c1.LAST_NAME;
            P_EMAIL := c1.EMAIL;
            P_TITLE := c1.TITLE;
            P_USERNAME := c1.USERNAME;
            P_SYSUR_AUTO_KEY := c1.SYSUR_AUTO_KEY;
            P_WOK_AUTO_KEY := c1.WOK_AUTO_KEY;
            P_USER_ID := c1.USER_ID;
            P_MANAGER := c1.MANAGER;
            P_TRAINER := c1.TRAINER;
            P_DEPARTMENT_ID := c1.DEPARTMENT_ID;
            P_CREATED := c1.CREATED;
            P_CREATED_BY := c1.CREATED_BY;
            P_UPDATED := c1.UPDATED;
            P_UPDATED_BY := c1.UPDATED_BY;
        end loop;
    end get_row;

 
    procedure insert_row  (
        P_ID                           in NUMBER default null,
        P_ROW_VERSION                  in INTEGER default null,
        P_ROW_KEY                      in VARCHAR2 default null,
        P_FIRST_NAME                   in VARCHAR2 default null,
        P_LAST_NAME                    in VARCHAR2 default null,
        P_EMAIL                        in VARCHAR2 default null,
        P_TITLE                        in VARCHAR2 default null,
        P_USERNAME                     in VARCHAR2 default null,
        P_SYSUR_AUTO_KEY               in NUMBER default null,
        P_WOK_AUTO_KEY                 in NUMBER default null,
        P_USER_ID                      in NUMBER default null,
        P_MANAGER                      in VARCHAR2 default null,
        P_TRAINER                      in VARCHAR2 default null,
        P_DEPARTMENT_ID                in NUMBER default null
    )
    is
    begin
        insert into IA_PERSONNEL (
            ID,
            FIRST_NAME,
            LAST_NAME,
            EMAIL,
            TITLE,
            USERNAME,
            SYSUR_AUTO_KEY,
            WOK_AUTO_KEY,
            USER_ID,
            MANAGER,
            TRAINER,
            DEPARTMENT_ID
        ) values (
            P_ID,
            P_FIRST_NAME,
            P_LAST_NAME,
            P_EMAIL,
            P_TITLE,
            P_USERNAME,
            P_SYSUR_AUTO_KEY,
            P_WOK_AUTO_KEY,
            P_USER_ID,
            P_MANAGER,
            P_TRAINER,
            P_DEPARTMENT_ID
        );
    end insert_row;

    procedure update_row  (
        P_ID                           in NUMBER default null,
        P_FIRST_NAME                   in VARCHAR2 default null,
        P_LAST_NAME                    in VARCHAR2 default null,
        P_EMAIL                        in VARCHAR2 default null,
        P_TITLE                        in VARCHAR2 default null,
        P_USERNAME                     in VARCHAR2 default null,
        P_SYSUR_AUTO_KEY               in NUMBER default null,
        P_WOK_AUTO_KEY                 in NUMBER default null,
        P_USER_ID                      in NUMBER default null,
        P_MANAGER                      in VARCHAR2 default null,
        P_TRAINER                      in VARCHAR2 default null,
        P_DEPARTMENT_ID                in NUMBER default null
    )
    is
    begin
        update  IA_PERSONNEL set 
            ID = P_ID,
            FIRST_NAME = P_FIRST_NAME,
            LAST_NAME = P_LAST_NAME,
            EMAIL = P_EMAIL,
            TITLE = P_TITLE,
            USERNAME = P_USERNAME,
            SYSUR_AUTO_KEY = P_SYSUR_AUTO_KEY,
            WOK_AUTO_KEY = P_WOK_AUTO_KEY,
            USER_ID = P_USER_ID,
            MANAGER = P_MANAGER,
            TRAINER = P_TRAINER,
            DEPARTMENT_ID = P_DEPARTMENT_ID
        where id = P_ID;
    end update_row;

    procedure delete_row (
        P_ID                           in number
    )
    is
    begin
        delete from IA_PERSONNEL where id = P_ID;
    end delete_row;

end IA_PERSONNEL_API;
/



-- load data
select 
    ID,
    ROW_VERSION,
    ROW_KEY,
    NAME,
    CREATED,
    CREATED_BY,
    UPDATED,
    UPDATED_BY
from IA_COMPANY;

select 
    ID,
    ROW_VERSION,
    ROW_KEY,
    NAME,
    COMPANY_ID,
    CREATED,
    CREATED_BY,
    UPDATED,
    UPDATED_BY
from IA_DEPARTMENT;

select 
    ID,
    ROW_VERSION,
    ROW_KEY,
    FIRST_NAME,
    LAST_NAME,
    EMAIL,
    TITLE,
    USERNAME,
    SYSUR_AUTO_KEY,
    WOK_AUTO_KEY,
    USER_ID,
    MANAGER,
    TRAINER,
    DEPARTMENT_ID,
    CREATED,
    CREATED_BY,
    UPDATED,
    UPDATED_BY
from IA_PERSONNEL;

 
-- Generated by Quick SQL Wednesday May 10, 2017  16:23:38
 
/*
company
 name
department
 name
 company_id
personnel
 first_name
 last_name
 email
 title vc255
 username
 sysur_auto_key num
 wok_auto_key num
 user_id 
 manager vc1 /default N
 trainer vc1 /default N
 department_id

# settings = { prefix: "IA_", date: "TIMESTAMP WITH LOCAL TIME ZONE", API: true, auditCols: true, rowKey: true, rowVersion: true, drop: true, hist: true, APEX: true, selects: true, uncomment: false, tags: true }
*/
